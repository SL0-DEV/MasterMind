using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;

namespace MasterMind.Core
{
    public class GameManager
    {
        public static GameManager? instance = null;

        public static GameManager Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new GameManager();
                }
                return instance;
            }
        }



        #region Proprties
        public int Rounds { get; private set; }
        public string NumbersToGuess = "1234";
        public bool IsSetUpCompleted => m_isSetUpCompleted;


        public bool IsGameStarting => m_isGameStarting;

        public bool IsGameOver => m_isGameOver;

        #endregion
        #region Private
        private int m_CorrectNumberInPlace = 0;
        private int m_CorrectNumberOutPlace = 0;
        private bool m_isGameStarting = false;
        private bool m_isGameOver = false;
        private bool m_isSetUpCompleted = false;
        private int m_currentRound = 0;

        private Random m_random = new Random();
        #endregion
        /// <summary>
        /// This function will called by another scripts to start the game
        /// We make sure the game is started to avoid overstart and crashes
        /// </summary>
        public void StartGame()
        {
            if (IsGameStarting) return;


            //Generating the password
            GeneratePassword();


            //Starting the game
            GameLoop();


            GameCore.ReadPlayerInput();


        }

        private void GeneratePassword()
        {
            for (int i = 0; i < NumbersToGuess.Length; i++)
            {
                char newValue = char.Parse(m_random.Next(0, 9).ToString());

                if (NumbersToGuess.Contains(newValue))
                {

                    while (NumbersToGuess.Contains(newValue))
                    {

                        newValue = char.Parse(m_random.Next(0, 9).ToString());
                    }
                }

                NumbersToGuess = NumbersToGuess.Replace(NumbersToGuess[i], newValue);


            }


            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("A new paswword has been generated\ngood luck!");
        }

        /// <summary>
        /// This function will give player instructions and introducing the game to him
        /// </summary>
        public void Instruction()
        {
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine($"Welcome to MasterMind game");


            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("*=============*\nMaster mind game is about guessing the 4 digit numbers generated by AI");


            Console.WriteLine("You have rounds to guess, when you guess the number I will give you hint by", ConsoleColor.Green);


            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("Correct digit but it's on wrong place", ConsoleColor.Yellow);

            Console.WriteLine("Correct digit in correct place\n*=============*", ConsoleColor.Yellow);


            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("This is an example of the game\n 4592\nWell-placed pieces: 3\nMisplaced pieces: 1", ConsoleColor.Green);

            Console.ForegroundColor = ConsoleColor.White;
        }

        private void GameLoop()
        {
            while (!IsGameOver)
            {
                Update();
            }
        }
        private void Update()
        {
            m_isGameStarting = true;

            // We make sure the player has played all rounds
            if (m_currentRound >= Rounds)
            {
                m_isGameOver = true;

                Console.ForegroundColor = ConsoleColor.Red;

                Console.WriteLine("Game Over\nyou've lost");


                Console.WriteLine($"The password was {NumbersToGuess}");

                m_isGameStarting = false;
                // Stopping the game
                return;
            }


            Console.WriteLine($"Round {m_currentRound}");

            m_CorrectNumberOutPlace = 0;

            m_CorrectNumberInPlace = 0;
            //Reading player input
            string userInput = GameCore.ReadPlayerInput();

            //Making sure the input is correct and it's not null
            if (userInput.Length < 5 && userInput != null)
            {
                for (int i = 0; i < userInput.Length; i++){

                    if (userInput[i] == NumbersToGuess[i]){

                        m_CorrectNumberInPlace += 1;
                    }

                    if (userInput[i] != NumbersToGuess[i] && NumbersToGuess.Contains(userInput[i])){

                        int countOfNumber = userInput.Count(number =>  number==userInput[i]);

                        m_CorrectNumberOutPlace += countOfNumber < 2 ? 1 :0;
                    }
                }

                if (m_CorrectNumberInPlace == 4)
                {
                    Console.ForegroundColor = ConsoleColor.Green;

                    Console.WriteLine($"Congratz!! You made it (claps *ig*)");

                    m_isGameOver = true;

                    m_isGameStarting = false;
                }
                else
                {
                    Console.WriteLine($"Well-placed pieces: {m_CorrectNumberInPlace}\nMisplaced pieces: {m_CorrectNumberOutPlace}");
                }

                m_currentRound++;
            }
            else
            {


                //Once we know the player have reached above 4 digits we make msg to the player
                Console.WriteLine("Please just 4 digits!!!");
            }

        }

        /// <summary>
        /// This function will call by the commands to restart the game
        /// </summary>
        public void RestartTheGame()
        {
            m_isGameOver = false;

            m_isGameStarting = false;

            m_currentRound = 0;

            m_CorrectNumberOutPlace = 0;

            m_CorrectNumberInPlace = 0;

            Console.Clear();

            StartGame();
        }
        /// <summary>
        /// This function will force the game to be stopped
        /// </summary>
        public void StopTheGame()
        {
            m_isGameStarting=false;

            m_isGameOver=true;

            m_currentRound=0;

            m_CorrectNumberInPlace = 0;

            m_CorrectNumberOutPlace = 0;

        }
        /// <summary>
        /// Giving the setup state to make sure is the player has finished the setup
        /// </summary>
        /// <param name="state"></param>
        public void SetSetupState(bool state)
        {
            m_isSetUpCompleted = state;
        }

        /// <summary>
        /// Set the rounds of the game in realtime or at the start of the app
        /// </summary>
        /// <param name="newRounds"></param>
        public  void SetRounds(int newRounds)
        {
            Rounds = newRounds;
        }

    }
}
